# code for the curve fit of pulses
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import curve_fit


ig = [1e-6,100,0.1,1000]

def P_0(t, p0, v, D, tau):
    x = 225e-6
    return (p_0 * np.exp((-(x - v * t)**2) / (4 * D * t) - t / tau)) / (2 * np.sqrt(np.pi * D * t))

a = 4200 #change the range
b = 5100

# change the file name vvv

df = pd.read_csv("HS50_8.csv",skiprows=12,names=['time','Efield','C1','C2','C3'])[a:b]

print(f"v_p = {225e-6/df.loc[df['C1'].idxmax(), 'time']}")


x_data = df['time']
y_data = df['C1']


popt, pcov = curve_fit(custom_function, x_data, y_data, method = 'dogbox',p0=ig)

p_0_opt, v_opt, D_opt, tau_opt = popt

y_fit = custom_function(x_data, p_0_opt, v_opt, D_opt, tau_opt)

plt.figure(figsize=(6, 4))
plt.rcParams['font.size'] = 15
plt.plot(x_data*1000000, y_data*1000)
plt.plot(x_data*1000000, y_fit*1000, 'r-')

plt.xlabel('Time / $\mu$s', fontsize = 15)
plt.ylabel('Voltage / mV', fontsize = 15)

plt.savefig("Temp23_4V_C1")

plt.show()

print("Optimized Parameters:")
print("f0 =", p_0_opt)
print("v =", v_opt)
print("D =", D_opt)
print("tau =", tau_opt)






#code to get graphs of mobility, recombination or diffusion constant against voltage
import numpy as np
import matplotlib.pyplot as plt
import pandas as pd
from scipy.optimize import curve_fit

df = pd.read_excel("Curve_Fit_Results.xlsx",usecols=['voltage','Diffusion coeff','mobility','recomb time'])

plt.figure(figsize=(8, 6))
plt.rcParams['font.size'] = 13

def plot_index(start, end, temp, col, marker):
    
    x = df['voltage'][start:end]
    y = df['mobility'][start:end] * 10000
    
    # to avoid repeated code
    plt.plot(
        x,
        y,
        col,
        label=f'T={temp}Â°C',
        linestyle = 'none',
        marker = marker,
        markerfacecolor = 'none',
        markersize = 5
    )
    
    # add line of best fit
    m, b = np.polyfit(x, y, 1)
    plt.plot(x, x*m + b, col)

plt.rcParams['font.size'] = 17    
plot_index(0, 6, 23, "b", 'x')
plot_index(7, 13, 40, "g", 's')
plot_index(14, 20, 50, "r", '^')
plot_index(21, 28, 60, "m" , 'o')


plt.xlabel('Voltage / V', fontsize = 17)
plt.ylabel('$\mu$ / cm$^{2}$V$^{-1}$s$^{-1}$', fontsize = 17)
plt.legend()

plt.savefig("Mobility.png",dpi=300)

plt.show()






#code for simulation of voltage against time
import numpy as np
import matplotlib.pyplot as plt

 distances = [225e-6,300e-6,375e-6]
n = 50000
labels = ['C$_1$','C$_2$','C$_3$']

for j in range(len(distances)):
    times = []
    distribution = []
    for _ in range(n):
        time = 0
        position = 0
        while position <= distances[j]:
            position += np.random.choice([2e-6, -2e-6], p=[0.7, 0.3])
            time += 1
        times.append(time)
   
   
    for i in range(min(times),max(times),2):
        distribution.append(times.count(i))
   
    x_data = np.linspace(min(times),max(times)+1,len(distribution))
    y_data = distribution
   
  
   
    plt.plot(x_data,y_data,label=labels[j])

plt.xlabel('Time / $\mathrm{\mu}s$')
plt.ylabel('Voltage / mV')
plt.legend(loc='upper right', fontsize=16, shadow=False)

plt.savefig('cvt.png',dpi=300,bbox_inches='tight')
